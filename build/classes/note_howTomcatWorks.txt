====================================================
一.处理静态资源的server
基于socket,读取输入流,安装http标准解析.创建response,以流写到客户端

使用:启动HttpServer,浏览器访问http://localhost:9080/1.html

====================================================
二.处理Servlet类资源 请求 的server
http://localhost:9080/servlet/PrimitiveServlet
这种servlet请求,交由ServletProcessor处理,该类会使用URLClassLoader
类加载器,去加载Servlet类,并调用其service方法

使用：请求http://localhost:9080/servlet/PrimitiveServlet,
通过HttpService->ServletProcessor(处理servlet请求)->调用具体的如PrimitiveServlet.service()方法,输出内容

使用RequestFacade门面封装Request对象
javax.servlet.ServletRequest
--ServletFacade
--Request

RequestFacade 和 Request 均实现 ServletRequest接口.且RequestFacade是Request的门面,持有Request对象并转调其方法(暴露出需要暴露的部分).
当servlet.service((ServletRequest) requestFacade, (ServletResponse) responseFacade);需要向上造型成ServletRequest对象.
此时用户可以再次强转成RequestFacade对象,却不能强转成Request对象,安全

====================================================
三.连接器
使用
http://localhost:9080/servlet/ModernServlet?userName=zz&password=pwdval
1.Catalina中两个模块:connector(连接器) 和  container(容器)

2.连接器:创建javax.servlet.http.HttpServletRequest对象 和 HttpServletResponse对象,
并将它们作为servlet的service方法的参数传入.
由于连接器无法得知最终调用的用户的servlet实现了javax.servlet.Servlet接口还是继承自javax.servlet.GenericServlet类
或javax.servlet.http.HttpServlet类,所以连接器总会提供HttpServletRequest和HttpServletResponse实例
(规范,当然它可以向上造型成Servlet或GenericServlet)

本章,连接器可1.解析HTTP请求头,cookie和请求参数/值

3.org.apache.catalina.util.StringManager类
用于处理应用程序中不同模块 和 Catalina本身中错误消息的国际化操作

Tomcat将错误消息存储在一个properties文件中,便于读取和编辑.
Tomcat将properties文件划分到不同的包中.每个包都由一个StringManager的实例进行处理(包内共享).
每个实例会读取指定包下的properties文件.

4.按模块划分
连接器模块: 
    --连接器及其支持类 HttpConnector, HttpProcessor
    --表示HTTP请求的类 HttpRequest
    --表示HTTP响应的类 HttpRequest
    --外观类 HttpRequestFacade, HttpResponseFacade
    --常量类
启动模块:Bootstrap
核心模块:ServletProcessor, StaticResourceProcessor

5.之前由HttpServer类负责1.等待HTTP请求, 并2.创建Request和Response对象
现在由HttpConnector等待HTTP请求,HttpProcessor负责创建Request和Response对象

6.解析HTTP请求
1)读取套接字的输入流
2)解析请求行
3)解析请求头
4)解析Cookie
5)获取参数

7.请求行可能出现的两种方式
请求行包括:1.请求方法 2.请求的URI(可能还包含queryString) 3.HTTP版本信息
GET /servlet/Modernservlet?userName=zz&password=pwdval HTTP/1.1
或
GET http://www.myAPP.com/ModernServlet?userName=zz&psw=11 HTTP/1.1

8.Cookie请求头示例   Cookie: userName=zc; psw=11;

9.请求参数的解析
在HttpRequest类中,只解析一次
GET请求,请求参数出现在 查询字符串中
POST请求,请求体中也会有请求参数

可通过getParameterMap()获取所有请求参数key-value对,但是不可修改其值.
org.apache.catalina.util.ParameterMap

====================================================
四.Tomcat的默认连接器
1.让项目中的org.apache包下的代码不报错
下载tomcat4,将lib下build到本工程中
再修复剩余的错误

2.tomcat中的连接器
是个独立模块,满足:
1)实现org.apache.catalina.Connector接口
2)负责创建实现了org.apache.catalina.Request接口的request对象
3)负责创建实现了org.apache.catalina.Response接口的response对象

3.tomcat中连接器的作用
(1)等待HTTP请求(2)创建reqeust和response对象(3)调用org.apache.catalina.Container接口的invoke()方法
invoke方法内部,servlet容器会载入相应的servlet类,调用service()方法

4.tomcat中的连接器 优化的地方
(1)使用对象池 避免重复创建对象带来的性能损耗
(2)很多地方,使用字符数组代替字符串

5.HTTP1.1新特性
(1)持久连接
(2)块编码
"transfer-encoding"请求头,指明字节流将会分块发送.
每个块以  块长度\r\n 内容
若发送结束以0\r\n结束
(3)状态码100的使用
若客户端要发送较长的请求体,可先发送Except: 100-continue
若服务端可以接受,相应头 HTTP/1.1 100 Continue

5.request类结构

--I javax.servlet.ServletRequest 和  I org.apache.catalina.Request
  --C org.apache.catalina.connector.RequestBase
    --

6.解析请求头,类似于
Cache-Control:private
Connection:Keep-Alive
Content-Encoding:gzip
Content-Length:78
Content-Type:text/html;charset=utf-8
Date:Sun, 04 Feb 2018 10:32:25 GMT
Expires:Sun, 04 Feb 2018 10:32:24 GMT
Server:BWS/1.0
Tracecode:19450031780570085130020418
Vary:Accept-Encoding

httpProcessor中的parseHeaders()每次只解析一个name:value对
======================================================
五.Servlet容器
1.四种servlet容器
(1)Engine:表示整个catalina servlet引擎
(2)Host:表示包含一个或多个context的虚拟主机
(3)Context:表示一个web应用,可有多个wrapper
(4)Wrapper:表示一个独立的servlet

2.容器可包含一些支持的组件:如载入器,记录器,管理器,领域 和 资源

3.在部署应用时,可配置server.xml来决定使用哪种容器,这是通过引入容器中的管道(plpeline)
和阀值(value)的集合实现的

管道pipeline
  --阀值value

4.
管道包含servlet容器将要调用的任务,一个阀代表一个具体的执行任务,可编辑server.xml动态添加阀,
基础阀总是最后一个执行.
一个servlet容器可 有 一个管道,调用容器的invoke()后,容器会将处理工作交由管道完成.管道一个个阀处理,直到处理完所有

管道 创建一个ValueContext接口实例 来 保证 所有阀 和 基础阀 都被调用一次.
ValueContext是管道的一个内部类,可访问管道所有成员

5.
阀 是 Value接口的实例,用于处理接收到的请求








